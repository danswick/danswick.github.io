<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Dan Swick</title>
 <link href="http://danswick.com/atom.xml" rel="self"/>
 <link href="http://danswick.com/"/>
 <updated>2015-06-01T02:17:50-05:00</updated>
 <id>http://danswick.com</id>
 <author>
   <name>Dan Swick</name>
   <email>dan.swick@gmail.com</email>
 </author>

 
 <entry>
   <title>Making a PNG Factory</title>
   <link href="http://danswick.com//posts/PNGfactory"/>
   <updated>2015-06-01T00:00:00-05:00</updated>
   <id>http://danswick.com/posts/PNGfactory</id>
   <content type="html">&lt;p&gt;For the past 9 months, I’ve had the opportunity to work on a fun, challenging &lt;a href=&quot;http://deltalumin.com&quot;&gt;project&lt;/a&gt; centered around helping people understand their relationship to electricity in their homes. It sits in a kind of strange edge area near &lt;a href=&quot;http://www.bidgely.com/&quot;&gt;services&lt;/a&gt; desiged to give you live, high-resolution data on your electricity consumption and the kinds of advice-based &lt;a href=&quot;http://www.opower.com/&quot;&gt;services&lt;/a&gt; a lot of utilities have started offering their customers in recent years. As a small non-profit, we aren’t concerned with besting these more mature services, but rather trying to learn more about how specific population segments react to a range of different bits of information presented to them. &lt;/p&gt;

&lt;p&gt;Our project introduces a lot of small and subtle tweaks to the way electricity information has traditionally been presented to consumers, but it all starts with that all-too-common foundation we’ve become so familiar with: the dashbaord. Lots of charts, graphs, and numbers, all replicated in a few different places, from a live website, to regular emails, to paper letters. Our participants get to choose which channel they prefer and we make sure the info gets to them in a readable fashion. &lt;/p&gt;

&lt;p&gt;We have a relatively small pool of participants (less than 100) and they only receive direct communication twice per month, but with 4-6 images apiece, that comes out to 600 images per month on the lowest end of the spectrum. Not fun to create manually, but since we’ve already got the live dashboard running, why not just build them automatically? &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/home-energy.png&quot; alt=&quot;monthly-energy&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-1-make-a-whole-lot-of-charts&quot;&gt;Step 1: Make a whole lot of charts&lt;/h2&gt;

&lt;p&gt;We have a basic user-facing dashboard that builds out a bunch of custom D3 charts based on the user’s ID. I had already built out all of the chart functions to accept the user’s ID number as a paramter, so it was just a matter of iterating through &lt;em&gt;all&lt;/em&gt; of the users, building charts for each one, then running some kind of script to convert them from an SVG to an image at a size that was appropriate for email and printed letters. At first I thought I should build and download one chart at a time, but it turned out to be a lot simpler and faster to do them all at once (at least that’s what I found based on my limited abilities). &lt;/p&gt;

&lt;p&gt;First, I wrote a little function to build prototype containers for each of my chart types: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buildPrototypeContainers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thingToAppend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defineContainers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;div id=&amp;quot;adminSectionHeader&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;h1&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;usr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;div id=&amp;quot;calendarChart&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot; class=&amp;quot;calendar-chart&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;div class=&amp;quot;proto-week&amp;quot; id=&amp;quot;weekChart&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;div class=&amp;quot;proto-month&amp;quot; id=&amp;quot;monthChart&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;div id=&amp;quot;applianceChart&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// create div destination containers w/ unique ID&amp;#39;s &lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#vizContainer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defineContainers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thingToAppend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, I wrote a function to take all of my users’ data (returned as an array of objects) and run it through my chart-building functions: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;containersIterate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;returnedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;dashboardData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returnedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;returnedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;buildPrototypeContainers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;buildWeekChart2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;buildMonthChart2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;makeAnApplianceChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;makeACalendarChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#errorMessageBlock&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;span class=&amp;#39;user-error&amp;#39;&amp;gt;&amp;lt;strong&amp;gt;The following users have encountered errors&amp;lt;/strong&amp;gt;: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;/span&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This function includes some error checking so that 1) it doesn’t get hung up on the inevitable broken bit of information in our user data and 2) it alerts us when data doesn’t look right by popping the offending user ID into the &lt;code&gt;#errorMessageBlock&lt;/code&gt; div at the very top of the page. &lt;/p&gt;

&lt;h2 id=&quot;step-2-run-your-charts-through-the-png-factory&quot;&gt;Step 2: Run your charts through the PNG factory&lt;/h2&gt;

&lt;p&gt;So we’ve got all of our SVG charts in one place, how do we turn them into images? Luckily, I found this &lt;em&gt;super&lt;/em&gt; handy script, &lt;a href=&quot;https://github.com/exupero/saveSvgAsPng&quot;&gt;saveSvgAsPng&lt;/a&gt; from GitHub user &lt;a href=&quot;https://github.com/exupero&quot;&gt;exupero&lt;/a&gt;. I really highly recommend reading the author’s very helpful &lt;a href=&quot;http://spin.atomicobject.com/2014/01/21/convert-svg-to-png/&quot;&gt;post on the subject&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The saveSvgAsPng script takes an element, output filename, and a few options as arguments and spits out nice PNGs, including all of your CSS formatting. Excellent! To make it work for my project, I just created a little &lt;code&gt;for&lt;/code&gt; loop to iterate over all of the SVG charts I created in previous step, running the saveSvgAsPng functions at each iteration.&lt;/p&gt;

&lt;p&gt;This results in a hillarious flurry of download animations, but it gets the job done! &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/download-fury.gif&quot; alt=&quot;download-fury&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gotchas-and-features&quot;&gt;Gotchas and features&lt;/h2&gt;

&lt;p&gt;I ran into a few gotchas along the way, some of which have already been addressed in saveSvgAsPng, some of which are easy to work around with a few tweaks. &lt;/p&gt;

&lt;h4 id=&quot;scaling-inline-images&quot;&gt;Scaling inline images&lt;/h4&gt;

&lt;p&gt;One of our charts uses inline SVG icons, which posed a bit of a problem because saveSvgAsPng recreates the image in its own canvas with its own coordinate system. However, I found that by tweaking the paramters in &lt;code&gt;ctx.drawImage()&lt;/code&gt; (read more &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage&quot;&gt;here&lt;/a&gt;), I could easily overcome this issue by passing in explicit height and width for the icons I was using. In the future, I’d like to do this programmatically, but since our icon sizes aren’t going to change, I’m okay hard-coding their width and height. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ctx.drawImage(image, dx, dy, dWidth, dHeight);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;drawImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;330&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;280&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// etc etc...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;scaling-the-output-png&quot;&gt;Scaling the output PNG&lt;/h4&gt;

&lt;p&gt;saveSvgAsPng has a neat built-in scaling option that you can pass when you call the function. Rather than hard-code it, I decided to give the user the option to choose how to scale the images they download (see the little input box in the gif above). This makes sense for our project because some images may be exported for emails and others for print letters. I wanted to give the person designing the document some flexibility in order to avoid weird pixellation. 2x scaling seemed to work pretty well for our use. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/icon-sample-image.png&quot; alt=&quot;icon-image-sample&quot; style=&quot;padding: 1em; width: 80%;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;using-external-fonts&quot;&gt;Using external fonts&lt;/h4&gt;

&lt;p&gt;saveSvgAsPng does a nice job pulling in styles from your CSS, but runs into some trouble with external fonts. At the time of this post, &lt;a href=&quot;https://github.com/exupero/saveSvgAsPng/issues/24&quot;&gt;this was a known issue&lt;/a&gt; and the recommended workaround is to encode &lt;code&gt;@font-face&lt;/code&gt; as Base64. I found &lt;a href=&quot;http://sosweetcreative.com/2613/font-face-and-base64-data-uri&quot;&gt;this article&lt;/a&gt; particularly helpful and followed its advice successfully. &lt;/p&gt;

&lt;p&gt;That’s it! My PNG factory is up and running after a bit of trial and error and our project continues to hum along without resorting to manually building 700 individual charts every month. &lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Maptime So Far</title>
   <link href="http://danswick.com//posts/maptime-so-far"/>
   <updated>2015-05-03T00:00:00-05:00</updated>
   <id>http://danswick.com/posts/maptime-so-far</id>
   <content type="html">&lt;p&gt;As Maptime Chicago’s 2015 season really starts to swing into gear, I thought it might be nice to take a quick snapshot of where we’ve been and where we’re going. &lt;/p&gt;

&lt;h2 id=&quot;origins&quot;&gt;Origins&lt;/h2&gt;

&lt;p&gt;Maptime Chicago got its start at &lt;a href=&quot;http://stateofthemap.us/&quot;&gt;State of The Map&lt;/a&gt; 2014 in DC. I read about all the great talks &lt;a href=&quot;https://twitter.com/lyzidiamond&quot;&gt;Lyzi&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/mappingmashups&quot;&gt;Alan&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/bethschechter&quot;&gt;Beth&lt;/a&gt; and many others had been giving and asked if anyone from Chicago had considered starting something up. Someone recommended I talk to &lt;a href=&quot;https://twitter.com/iandees&quot;&gt;Ian&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/mapmeld&quot;&gt;Nick&lt;/a&gt; from the Chicago OpenStreetMap community, so I did! They were both interested in working together, but, unfortunately for me, they both moved out of the city within a few months of the conference. &lt;/p&gt;

&lt;p&gt;I got started anyway, planning Chicago’s first Maptime event with &lt;a href=&quot;https://twitter.com/stevevance&quot;&gt;Steve Vance&lt;/a&gt;. We talked about OpenStreetMap at Thoughtworks and had to run a pretty serious audible when OSM’s email servers went down, preventing our attendees from registering new OSM accounts. Everyone still seemed to have a great time and we’ve heard from a handful of folks who still contribute to OSM many months later. &lt;/p&gt;

&lt;h2 id=&quot;planning&quot;&gt;Planning&lt;/h2&gt;

&lt;p&gt;I tried to keep the ball rolling on my own, but quickly realized that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;organizing a Maptime chapter is a lot of work&lt;/li&gt;
  &lt;li&gt;without other contributors, I was going to have to learn a new technology every month in order to keep things interesting&lt;/li&gt;
  &lt;li&gt;people are really interested in this type of get-together &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, I started going to Open Gov Hack Night as often as I could, in search of others to help out. I recruited &lt;a href=&quot;https://twitter.com/outoftheyards&quot;&gt;Justin&lt;/a&gt;, &lt;a href=&quot;http://cartografika.net/&quot;&gt;Adam&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/lhyeung125&quot;&gt;Louise&lt;/a&gt;, but, admittedly, have not done a great job of engaging their talent and energy. We’ve put together a little &lt;a href=&quot;https://docs.google.com/document/d/1EblRUynuEK0iTnsZAQTirgbEFNlX72Sr63KnPlAcpfw/edit&quot;&gt;organizing doc&lt;/a&gt; and will hopefully be able to dig into it more this year.&lt;/p&gt;

&lt;p&gt;On the outreach front, I set up a MaptimeChi Twitter account (&lt;a href=&quot;https://twitter.com/maptimechi&quot;&gt;@maptimeCHI&lt;/a&gt;), &lt;a href=&quot;http://maptime.io/chicago&quot;&gt;website&lt;/a&gt;, email list, and eventbrite account to help organize outreach and keep our materials in one place. Steve Vance has done a great job of promoting MaptimeChi at Open Gov Hack Night and &lt;a href=&quot;https://twitter.com/smartchicago&quot;&gt;Smart Chicago&lt;/a&gt;, our new host, has been amazing at getting the word out and providing fantastic meeting space and food. Smart Chicago has also suggested we book several months in advance, which has been a surprsingly useful motivator for getting workshops planned ahead of time. &lt;/p&gt;

&lt;h2 id=&quot;workshops-and-sort-of-workshops&quot;&gt;Workshops and sort-of-workshops&lt;/h2&gt;

&lt;p&gt;Sometimes the best way to see where you’re going is to look back at where you’ve been. So here is a list of all the Maptime and Maptime-adjacent talks I’ve given or contributed to since getting started in 2014: &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;OSM 101 - Steve Vance presented at Thoughtworks
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Materials&lt;/strong&gt;: We did a quick &lt;a href=&quot;http://danswick.com/maptime_july/&quot;&gt;intro&lt;/a&gt; and Steve worked off of the classic version of &lt;a href=&quot;http://maptime.io/osm-101/&quot;&gt;OSM 101&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://maptime.io/chicago/event/2014/10/15/maptober-leaflet/&quot;&gt;Learn Leaflet for Maptober&lt;/a&gt; - I presented at Thoughtworks
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Materials&lt;/strong&gt;: I adapted classic &lt;a href=&quot;http://maptime.io/anatomy-of-a-web-map/&quot;&gt;Anatomy of a Webmap&lt;/a&gt; slides into &lt;a href=&quot;http://maptime.io/chicago/learn-leaflet/&quot;&gt;this presentation&lt;/a&gt;. We also made a rat map and I put the code and data up on the Maptime Chi page.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;In November, I talked to a friend’s Computer Science class about Geodata
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Materials&lt;/strong&gt;: I adapted Lyzi’s Let’s Talk About Geodata presentation into &lt;a href=&quot;http://danswick.com/presentations/loyolageodata/&quot;&gt;these slides&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Also in November, I gave a talk I called ‘Demystifying GIS’ to the staff at the Delta Institute, where I work.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Materials&lt;/strong&gt;: I mashed up a bunch of things from the above Geodata presentation as well as Lyzi’s &lt;a href=&quot;http://lyzidiamond.com/geodesy&quot;&gt;Wild World of Geodesy&lt;/a&gt; presentation. There’s some other random stuff thrown in, but &lt;a href=&quot;http://danswick.com/presentations/DeltaGIS/&quot;&gt;here are the slides&lt;/a&gt;. &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;OSM Part II. In December, Steve and I got the band back together for another OSM workshop, this time with an emphasis on using advanced editing tools. There were no slides or takeaway materials, but I did write a &lt;a href=&quot;http://maptime.io/chicago/event/2014/12/14/OSMHacknight/&quot;&gt;blog post&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://maptime.io/chicago/event/2015/02/26/webMap/&quot;&gt;Anatomy of a Webmap&lt;/a&gt;. In February, I adapted the Anatomy of a Webmap and MaptimeSea’s &lt;a href=&quot;http://maptimesea.github.io/2014/11/05/web-map-intro.html&quot;&gt;Intro to Webpages &amp;amp; Webmaps&lt;/a&gt;presentations. Smart Chicago also livestreamed the event, which was awesome!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://maptime.io/chicago/event/2015/04/22/qgis101/&quot;&gt;Make a Map with QGIS&lt;/a&gt;. Most recently, I gave a presentation on QGIS. It was coincident with the AAG2015 conference, so we got a great, diverse croud. It was a ton of fun. 
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Materials&lt;/strong&gt;: &lt;a href=&quot;http://maptime.io/chicago/qgis-101/#0&quot;&gt;Slides&lt;/a&gt; adapted from Maptime Boston’s &lt;a href=&quot;http://maptimeboston.github.io/qgis-101/#0&quot;&gt;QGIS presentation&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/maptime/chicago/gh-pages/qgis-101/data/maptimeChiQGIS101.zip&quot;&gt;data package&lt;/a&gt;.  &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;coming-up&quot;&gt;Coming up&lt;/h2&gt;

&lt;p&gt;Beyond the monthly (hopefully this year!) drumbeat of meetups, there are lots of things bubbling right now, none of which are really finalized enough to post, but all of which would be amazing if they come to fruition. The next two Maptimes are already on the books, although they don’t have topics yet. &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;May 28th&lt;/li&gt;
  &lt;li&gt;June 24th&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Really looking forward to Maptime Chicago’s second season!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Learn Together</title>
   <link href="http://danswick.com//posts/learn-together"/>
   <updated>2014-07-03T00:00:00-05:00</updated>
   <id>http://danswick.com/posts/learn-together</id>
   <content type="html">&lt;p&gt;Over the last couple of years I’ve had this nagging feeling, a bit like standing on the very edge of the tech community looking in, unsure if or where I fit in. I know that I want to be on the inside, but it hasn’t always been clear why. Maybe a sense of inertia or curiosity or the lure of greater employability. Probably a little of each, but I think the biggest factor has to do with the desire to know something more completely. In this case, the “something” is technology, both in the computers/internet/software sense and also in the more meta, “how does technology influence society/the environment/art/etc?” sense. To be so inundated by and reliant on technology without a deep sense of understanding feels wrong, incomplete, and perhaps a little irresponsible, especially since a core element of my career has involved using technology to help communities solve problems. &lt;/p&gt;

&lt;p&gt;So, whether through conscious effort or awkward stumbling, I’ve started amassing knowledge. I’m not just interested in learning how to code in a specific language, though that is certainly among my interests. Rather, because my learning style generally follows a ‘wide-net’ approach, I want to better understand the &lt;em&gt;communities&lt;/em&gt; surrounding tech, the &lt;em&gt;culture&lt;/em&gt; of open source, the greater industry’s big issues and how, if at all, I can make tech jive with my other professional interests. To that end, I’ve spent a lot of time reading - blogs, twitter topics, GitHub issues, etc. Trying to learn to code on your own is lonely and business and I often find myself wishing for a social outlet, if only to ask questions, share stories or just say, “hey, I got this thing to work!” It’s also the kind of endeavor that, despite all the fancy new tools welcoming newcomers, feels more overwhelmingly huge the farther you dig (&lt;a href=&quot;http://matt.might.net/articles/phd-school-in-pictures/&quot;&gt;relevant&lt;/a&gt;). &lt;/p&gt;

&lt;h2 id=&quot;the-lonely-road&quot;&gt;The lonely road&lt;/h2&gt;

&lt;p&gt;If you spend any amount of time digging through Quora threads on beginning programming, especially if those threads have anything to do with coding bootcamps, it’s easy get the sense that all great developers have honed their crafts alone, putting their noses to the grindstone during every spare moment. I’m certain this is true for many developers, but if the industry is to change perceptions and welcome a greater diversity of people, this lone programmer mythology will probably have to evolve. I’m no stranger to learning on my own, making mistakes or cursing out loud at my computer in an empty apartment, but have found that I can only get so far on any given topic before I need to consult other human beings, and I suspect a lot of people feel the same way. &lt;/p&gt;

&lt;h2 id=&quot;the-geo-people&quot;&gt;The geo people&lt;/h2&gt;

&lt;p&gt;My tie to tech has always been my work focus on geospatial technology. My work involves analyzing all manner of geo data, creating map products for publication and figuring out how to help communities and organizations put their data to use solving one problem or another. While it’s certainly a valuable tool, one can only go so far as an &lt;a href=&quot;http://www.esri.com/software/arcgis&quot;&gt;ArcGIS&lt;/a&gt; user before feeling like little more than an expert fixer of ArcGIS-specific bugs. To make matters worse, without a moderate comfort level in programming, official help docs can be quite intimidating and, due to sweeping changes between versions (backward compatibility would be nice, guys), may lead users down a dead end road to frustration-ville. &lt;/p&gt;

&lt;p&gt;In my experience, most ArcGIS users became ArcGIS users in college, where academic software deals have made ESRI’s suite of products the de facto choice for making any kind of geospatial product. However, with unofficial support forums like &lt;a href=&quot;http://gis.stackexchange.com/&quot;&gt;gis.stackexchange.com&lt;/a&gt; popping up, it’s becoming impossible to ignore the huge and vibrant world of open-source, web-friendly products and, perhaps more importantly, their respective communities. These days, you can’t go to a GIS users group, even those oriented to ArcGIS in particular, without hearing about &lt;a href=&quot;http://leafletjs.com/&quot;&gt;Leaflet&lt;/a&gt;, &lt;a href=&quot;http://www.openstreetmap.org/#map=5/51.500/-0.100&quot;&gt;OpenStreetMap&lt;/a&gt; or &lt;a href=&quot;https://www.mapbox.com/tilemill/&quot;&gt;MapBox/TileMill&lt;/a&gt;, and for good reason. A small army of dedicated volunteers, companies and organizations have done what ESRI couldn’t, not just by building better tools, but by building a community for themselves and leaving the door open behind them. &lt;/p&gt;

&lt;p&gt;As I’ve started following the open-source geo community, contributing where I can, I’ve inadvertently started developing some of the tech acumen I’d been looking for. Most projects have active GitHub communities (hi, &lt;a href=&quot;https://github.com/maptime&quot;&gt;Maptime&lt;/a&gt;!), some have beautifully-written &lt;a href=&quot;https://www.mapbox.com/foundations/&quot;&gt;guides&lt;/a&gt;, and others have totally accessible and beginner-friendly &lt;a href=&quot;http://stateofthemap.us/&quot;&gt;conferences&lt;/a&gt;. Central members are active and responsive on Twitter and there are new and innovative meetups popping up all over the place. &lt;/p&gt;

&lt;h2 id=&quot;business-time&quot;&gt;Business time&lt;/h2&gt;

&lt;p&gt;This spring, I found myself with a bunch of extra vacation and frustrated at my slow pace of learning on my own. A reminder about the upcoming &lt;a href=&quot;http://stateofthemap.us/&quot;&gt;State of the Map&lt;/a&gt; conference popped up on Twitter and I decided to go. Even if I couldn’t find a way to tie it into my professional development schedule at work, it seemed like a pretty casual and social conference and hey, spring time in D.C. is nothing to sneeze at. E and I threw down on some plane tickets and started planning for a nice, long weekend out of town. &lt;/p&gt;

&lt;p&gt;If I’m being completely honest, the first two days of the conference were kind of awkward. I didn’t know anyone, there seemed to be a lot of community norms I didn’t understand and I didn’t feel like I had anything to contribute. I’ve never been particularly active on OpenStreetMap (though that’s changing) and I’m not a developer, so it was tough initiating conversations. On the second day of the conference, I found myself at a lunch table with a bunch of computer scientists, just listening in, when somebody mentioned their work using geo data for an urban planning project. We introduced ourselves, started geeking out about planner-y things (stakeholders! prioritizing!) and promptly spooked our computer scientist friends away from the table. My new friend introduced me to some other beginners and recommended some social conference activities. &lt;/p&gt;

&lt;p&gt;The rest of the conference was fantastic. I got to meet and speak with people who’s work I’ve been following closely for years, have drinks with the people building the future of geospatial, and got myself involved with some truly innovative projects. It’s something we all forget, especially those of us who spend most of our waking hours in front of a screen, but sometimes being in a room with like-minded people is what it takes to accelerate one’s work. Shared experience and communities of practice put work into a social context and reinforce the reasons we do our work in the first place. Are you motivated by building cool new tools? Who is going to use your tools? Do you want to make a social impact? There are people just like you pushing toward similar goals - how can you learn from one another? &lt;/p&gt;

&lt;h2 id=&quot;open-source-communities&quot;&gt;Open source communities&lt;/h2&gt;

&lt;p&gt;I’ve been a longtime advocate of open source software, but I’m not sure I’ve always understood why. My best guess is that it’s a mix of vague feelings of democracy mixed with an aversion to large, monolithic corporations. Probably not the best reasons to advocate for something. &lt;/p&gt;

&lt;p&gt;What I came away with after State of the Map, besides a ton of notes and new Twitter friends, is a better understanding of what this whole open source thing is all about. Yeah, it’s about things like licenses, pull requests and free (as in both beer and speech) software. But I don’t think that’s all, or even most of the story. I think people contribute because of the community. Because they want to help build something better and because doing so together builds a sense of community and belonging. I’m drawn to the ideals of the burgeoning open data community because of the impact it promises. I believe open data can deliver on its promises, but ultimately, I participate not for the data’s sake, but for my community.&lt;/p&gt;

&lt;p&gt;The best projects, whether they set out to &lt;a href=&quot;http://www.openstreetmap.org&quot;&gt;democratize the globe&lt;/a&gt;, &lt;a href=&quot;http://neighbor-space.org/&quot;&gt;turn vacant lots in community open space&lt;/a&gt; or &lt;a href=&quot;http://www.zefrank.com/theshow/&quot;&gt;push the boundaries of social interaction online&lt;/a&gt;, understand and respond to their communities. Sometimes it’s a conscious effort and other times it’s just the result of a particular kind of attitude or personality.       &lt;/p&gt;

&lt;h2 id=&quot;bringing-it-all-together&quot;&gt;Bringing it all together&lt;/h2&gt;

&lt;p&gt;I’m continuing to learn more about the people, organizations and ideas the drive the technology that makes my work and life possible. Some days, the slog of learning alone is hard to overcome. Other days, I remember that I’m surrounded by phenomenal communities, some &lt;a href=&quot;http://opengovhacknight.org/&quot;&gt;local&lt;/a&gt; and some &lt;a href=&quot;http://hotosm.org/&quot;&gt;international&lt;/a&gt; who’ve all overcome these things before and are dedicated to bringing others into the fold. Over the next year, I hope to dig in deeper, share some knowledge of my own, and hopefully give back a bit of what I’ve gained. &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Headphone Music - Motorik</title>
   <link href="http://danswick.com//posts/motorik"/>
   <updated>2014-07-01T00:00:00-05:00</updated>
   <id>http://danswick.com/posts/motorik</id>
   <content type="html">&lt;p&gt;I work in an open office, so headphones and a few great playlists are absolutely necessary to get through the day. I’ll sometimes rely on robot-selected playlists from Pandora or similar, but always end up wishing I’d spent that time getting more familiar with an artist or album - an activity that, as time goes on, is becoming more and more difficult to do. My old fallbacks for music discovery, like college radio (have to rep my alma mater, &lt;a href=&quot;http://www.kjhk.org&quot;&gt;KJHK&lt;/a&gt;) and MP3 blogs (RIP), either don’t exist are are more difficult to access. How, then, to avoid burning out your favorite tracks? &lt;/p&gt;

&lt;p&gt;These days, my strategy is primarily to stalk people on Spotify, but there’s one pursuit I’ve found particularly rewarding - building a collaborative Spotify playlist of songs featuring the &lt;a href=&quot;http://en.wikipedia.org/wiki/Motorik&quot;&gt;Motorik&lt;/a&gt; beat, a 4/4 drumbeat popularized by Krautrock bands like Can, Neu! and Kraftwerk. The basic beat: &lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Beat&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;+&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;+&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;+&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;4&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;+&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Hi-Hat&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Snare&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Kick&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&amp;lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/ufH87nA9klU&quot; frameborder=&quot;0&quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Neu!&lt;/strong&gt; - Hallogallo&lt;/em&gt;, quintessential motorik &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I find the beat’s simultaneously driving and droning character is particularly well-suited to headphone time at work. It also helps that a good portion of Motorik songs either have no lyrics or lyrics in German. &lt;/p&gt;

&lt;p&gt;Once I started pulling together a list of Krautrock-era Motorik songs, the beat seemed to appear all over the place and I wanted to see how songs from different eras would fit together in one big playlist. It can be difficult to find songs based on something as exoteric as a drumbeat, but I found a few great lists around the web that I’ve been able to pull from. Each includes a handful of songs that, while interesting examples of the Motorik style, miss the mark for my purposes with distracting lyrics, lots of dissonance or distracting instrumentation. Regardless, they’re all worth checking out: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lastfm.es/user/CitizenJu/journal/2011/03/20/4a8mx1_evolution_of_the_motorik!_a_chronological_spotify_playlist_of_songs_that_ultilize_the_motorik_beat&quot;&gt;Evolution of Motorik!&lt;/a&gt; on Last.fm &lt;/li&gt;
  &lt;li&gt;[Top 10 Songs with the Motorik Beat”(http://sickmouthy.com/2012/06/19/top-ten-songs-with-the-motorik-beat/)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thequietus.com/articles/03472-from-neu-to-kraftwerk-football-motorik-and-the-pulse-of-modernity&quot;&gt;From Neu! to Kraftwork: Football, Motorik and the Pulse of Modernity&lt;/a&gt; on the Quietus&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLUqGOxYKbKHejf0bEtOtKjGe_Bk35Q_-k&quot;&gt;Motorik Krautrock&lt;/a&gt; playlist on YouTube &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=iAjkZhK9DaM&quot;&gt;Motorik: The Beat Goes On…&lt;/a&gt; short documentary &lt;/li&gt;
  &lt;li&gt;The radio, grocery checkout lines, etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without further ado, here’s the Spotify playlist. If you would like to contribute, please feel free. I just ask that you do your best to match the vibe of the songs and keep the original intent (focusing while using headphones) in mind. &lt;/p&gt;

&lt;div&gt;&lt;iframe src=&quot;https://embed.spotify.com/?uri=spotify:user:rascaltwitch:playlist:4C378qNo7ug7V2WvaC7XyH&quot; width=&quot;300&quot; height=&quot;380&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://embed.spotify.com/?uri=spotify:user:rascaltwitch:playlist:4C378qNo7ug7V2WvaC7XyH&quot;&gt;Motorik Playlist&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Jekyll for WYSIWYG'ers</title>
   <link href="http://danswick.com//posts/setup"/>
   <updated>2014-06-27T00:00:00-05:00</updated>
   <id>http://danswick.com/posts/setup</id>
   <content type="html">&lt;h2 id=&quot;why-jekyll-and-this-whole-static-sites-business&quot;&gt;Why Jekyll and this whole static sites business?&lt;/h2&gt;

&lt;p&gt;About a year ago, a sweet hosting deal I’d managed to finagle fell through and my modest personal website needed a place to live. I’d been using Wordpress for years and had become fairly familiar with its workflows and quirks. Between my personal writing and work-related writing, I’ve probably set up a dozen Wordpress sites over the years, but never really got past the official installer scripts, WYSIWYG editors and, occasionally, small php edits here and there. &lt;/p&gt;

&lt;p&gt;I think Wordpress is great. My employer just switched over and our communications folk love it. There’s a lot of easy-to-access documentation and no matter where you’re working, there’s probably someone familiar enough to help you out of a jam. That being said, I never really had fun working with it. I like to tinker, take things apart and understand what’s going on when they break. Wordpress is just too complicated for my newbie skills and I didn’t feel I was able to get a firm enough grasp to really understand what was going on under the hood. Enter Jekyll. &lt;/p&gt;

&lt;p&gt;The concept of static pages appeals to my tinkerer sensibility. Without all the php and complex database structures, I stand a fighting chance of comprehending what’s going on each time I commit a new post and if something breaks it’s not likely to affect the whole site, leaving me totally helpless to fix it. And it doesn’t hurt that pretty much all of the geo tech folk I admire are using it. &lt;/p&gt;

&lt;p&gt;I really like writing Markdown, whether it’s for a blog post, conference notes or a presentation outline. Folks all over the web have extolled its virtues, but I’m particularly fond of this post by Ben Balter on why it’s about &lt;a href=&quot;http://ben.balter.com/2014/03/31/word-versus-markdown-more-than-mere-semantics/&quot;&gt;more than just semantics&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;So…yay static pages. Yay markdown. Yay open source. Jekyll seemed great but I was still without hosting and sort of hesitant to plunk down some cash on what would ultimately be an experiment. Luckily, GitHub’s free GitHub Pages already run Jekyll and offer free hosting. To sweeten the deal, it’s fairly trivial to retain your existing URL. &lt;/p&gt;

&lt;p&gt;I just want to point something out that sort of escaped me when I was looking into making the switch. You’ll see a lot about how GitHub pages are “powered by Jekyll,” but unless you’re already familiar with the way Jekyll works, it might not immediately be obvious what this means and you might miss one of the biggest benefits of buying into the Jekyll/GH Pages environment. “Powered by Jekyll” means that, rather than running your new Markdown posts through Jekyll locally &lt;em&gt;then&lt;/em&gt; committing then resulting files, you can simply commit your posts and GH Pages will churn them through Jekyll for you. I initially assumed that in order to post to my blog, I’d have to be working on a computer with Jekyll installed so you can imagine my delight when I realized I could create, edit and commit posts from anywhere. Pretty neat stuff. &lt;/p&gt;

&lt;p&gt;There are many thousands of words all over the web explaining how to set up Jekyll, so I’ll refrain from spelling out the whole process (see the resources section at the end for some helpful links) and instead just outline some of the barriers I encountered and how I overcame them. &lt;/p&gt;

&lt;h2 id=&quot;getting-jekyll-running-locally-on-os-x&quot;&gt;Getting Jekyll running locally on OS X&lt;/h2&gt;

&lt;p&gt;Before you dive into the Jekyll hot tub, be sure you understand that you’ll need to do some work in the terminal and if you’re new to this type of thing, it’s probably going to get messy. But &lt;em&gt;that’s okay!&lt;/em&gt; You (probably) won’t break anything beyond repair and you’ll learn a lot in the process. The &lt;a href=&quot;http://jekyllrb.com/docs/installation/&quot;&gt;official Jekyll docs&lt;/a&gt; are essential, but there are some other great guides out there as well.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Windows users are kind of out of luck in this department. It’s possible to get up and running, but requires some special steps that I won’t get into here. Once your site is built you can still post from a Windows computer, but you won’t be able to do all the fancy local-side Jekyll stuff. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I ran into all kinds of newbie problems getting Ruby working, but they pretty much all stemmed from my improper use of too many package installers and, when I got frustrated, sudo’ing myself into oblivion and ruining all of my file permissions. Don’t be like me. Follow the documentation and don’t abuse sudo.&lt;/p&gt;

&lt;p&gt;Stuff you should install on your mac: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The latest XCode command line tools  &lt;/li&gt;
  &lt;li&gt;RubyGems (comes with Ruby 1.9 and greater)&lt;/li&gt;
  &lt;li&gt;Ruby Version Manager (RVM) &lt;/li&gt;
  &lt;li&gt;Bundler &lt;/li&gt;
  &lt;li&gt;Homebrew&lt;/li&gt;
  &lt;li&gt;Jekyll!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mavericks-is-a-pain&quot;&gt;Mavericks is a pain&lt;/h3&gt;

&lt;p&gt;I foolishly updated OS X right in the middle of trying to wrap my head around Jekyll and encountered all kinds of issues that are addressed in &lt;a href=&quot;http://hackercodex.com/guide/mac-osx-mavericks-10.9-configuration/&quot;&gt;this article&lt;/a&gt; about configuring Mavericks. It covers some basic stuff like un-hiding your library folder, fixing your &lt;code&gt;PATH&lt;/code&gt; (read the comments to get a broader view on PATH issues) and setting up &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;.  &lt;/p&gt;

&lt;h3 id=&quot;system-ruby&quot;&gt;System Ruby&lt;/h3&gt;

&lt;p&gt;I had a lot of problems with Ruby, which all seemed to trace back to the pre-installed version of Ruby that comes with Mavericks. I’m no Ruby expert, but it’s much easier to work through Ruby Version Manager rather than deal with the &lt;a href=&quot;http://robots.thoughtbot.com/psa-do-not-use-system-ruby&quot;&gt;many issues&lt;/a&gt; that come from working with pre-installed Ruby. Do yourself a favor and set up &lt;a href=&quot;http://bundler.io/&quot;&gt;Bundler&lt;/a&gt; and &lt;a href=&quot;http://rvm.io/&quot;&gt;RVM&lt;/a&gt; before diving into Jekyll. &lt;/p&gt;

&lt;h2 id=&quot;configuring-a-custom-domain-registered-through-godaddy&quot;&gt;Configuring a custom domain registered through GoDaddy&lt;/h2&gt;

&lt;p&gt;This step has actually gotten a bit more transparent in the months since I set my site up. &lt;a href=&quot;https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider&quot;&gt;This official GitHub help doc&lt;/a&gt; should actually provide all of the information you’ll need, but if you’re unfamiliar with GoDaddy’s DNS settings panel, &lt;a href=&quot;https://medium.com/@LovettLovett/github-pages-godaddy-f0318c2f25a&quot;&gt;this guide&lt;/a&gt; has a lot of helpful screenshots, though the author only sets up one &lt;code&gt;A&lt;/code&gt; record. You’ll need the two listed in the previously mentioned official help doc. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;TIP:&lt;/strong&gt; You might run into some documentation that mentions setting up a &lt;code&gt;gh-pages&lt;/code&gt; repo. This refers specifically to Project Pages. If you’re setting up a User Page, you should ignore references to &lt;code&gt;gh-pages&lt;/code&gt;. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;understanding-templates-and-theming&quot;&gt;Understanding templates and theming&lt;/h2&gt;

&lt;p&gt;Reading through the Jekyll documentation, I felt like I had a fairly strong understanding of the mechanics behind Jekyll’s template system, but had a hard time making it work in practice. I really wanted to hand-code everything, but ended up settling on a simple pre-built template. One of my goals is to build my chops a bit and so far I think tweaking a simple existing template is the right choice. Jekyll is transparent enough that I can get a good sense for how everything works, save myself a lot of headache and easily make some deeper changes to the templates. &lt;/p&gt;

&lt;p&gt;I am currently using &lt;a href=&quot;https://github.com/poole/poole&quot;&gt;Poole&lt;/a&gt;, which includes everything you need to get started poking around Jekyll. The author, &lt;a href=&quot;https://github.com/mdo&quot;&gt;Mark Otto&lt;/a&gt;, has done a great job laying out documentation and building clear examples. &lt;a href=&quot;http://joshualande.com/jekyll-github-pages-poole/&quot;&gt;Joshua Lande&lt;/a&gt; has posted a really nice guide to working with Poole as well. &lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/sitemaps-for-github-pages&quot;&gt;“SEO” with site maps&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;I also didn’t quite understand how to add &lt;code&gt;jekyll-sitemap&lt;/code&gt; to my &lt;code&gt;_config.yml&lt;/code&gt; file. It should look like this:&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;code&gt;
  gems: [&#39;jekyll_sitemap&#39;]
 &lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Date parsing problems. I had to remove &lt;code&gt;date_to_string&lt;/code&gt; from &lt;code&gt;{{ post.date | date_to_string }}&lt;/code&gt; in my &lt;code&gt;post.html&lt;/code&gt; template because it was passing a &lt;code&gt;nil&lt;/code&gt; value. See &lt;a href=&quot;https://github.com/jekyll/jekyll/issues/2370&quot;&gt;this&lt;/a&gt; issue for more details. &lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;Bonus Tip!&lt;/strong&gt; After fixing my date parsing problem and adding the above resource note, this post mysteriously broke again! The issue was that Jekyll interpreted the code blocks, which included my original broken code, as &lt;em&gt;Liquid code&lt;/em&gt; rather than text. I found &lt;a href=&quot;http://truongtx.me/2013/01/09/display-liquid-code-in-jekyll/&quot;&gt;this post&lt;/a&gt; super helpful. In short, you’ll want to use the raw tag like so: &lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;pre&gt;&lt;code&gt;{% raw %}
some liquid stuff
{% endraw %} 
&lt;/code&gt;&lt;/pre&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://joshualande.com/jekyll-github-pages-poole/&quot;&gt;Creating an “Archive” page&lt;/a&gt;. See “Customizations” section. &lt;/li&gt;
  &lt;li&gt;RSS feeds - a &lt;a href=&quot;https://github.com/snaptortoise/jekyll-rss-feeds&quot;&gt;couple of options&lt;/a&gt; using templates to generate feed xml. &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hackercodex.com/guide/mac-osx-mavericks-10.9-configuration/&quot;&gt;OS X Configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/using-jekyll-with-pages#keeping-jekyll-up-to-date&quot;&gt;Keeping Jekyll Up to Date&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 

</feed>
